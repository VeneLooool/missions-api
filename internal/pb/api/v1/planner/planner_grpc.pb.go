// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/v1/planner/planner.proto

package planner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Planner_CalculateMissionPlan_FullMethodName      = "/missions_api.api.v1.planner.Planner/CalculateMissionPlan"
	Planner_GetMissionPlanByMissionID_FullMethodName = "/missions_api.api.v1.planner.Planner/GetMissionPlanByMissionID"
)

// PlannerClient is the client API for Planner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlannerClient interface {
	CalculateMissionPlan(ctx context.Context, in *CalculateMissionPlan_Request, opts ...grpc.CallOption) (*CalculateMissionPlan_Response, error)
	GetMissionPlanByMissionID(ctx context.Context, in *GetMissionPlanByMissionID_Request, opts ...grpc.CallOption) (*GetMissionPlanByMissionID_Response, error)
}

type plannerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlannerClient(cc grpc.ClientConnInterface) PlannerClient {
	return &plannerClient{cc}
}

func (c *plannerClient) CalculateMissionPlan(ctx context.Context, in *CalculateMissionPlan_Request, opts ...grpc.CallOption) (*CalculateMissionPlan_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateMissionPlan_Response)
	err := c.cc.Invoke(ctx, Planner_CalculateMissionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plannerClient) GetMissionPlanByMissionID(ctx context.Context, in *GetMissionPlanByMissionID_Request, opts ...grpc.CallOption) (*GetMissionPlanByMissionID_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMissionPlanByMissionID_Response)
	err := c.cc.Invoke(ctx, Planner_GetMissionPlanByMissionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlannerServer is the server API for Planner service.
// All implementations must embed UnimplementedPlannerServer
// for forward compatibility.
type PlannerServer interface {
	CalculateMissionPlan(context.Context, *CalculateMissionPlan_Request) (*CalculateMissionPlan_Response, error)
	GetMissionPlanByMissionID(context.Context, *GetMissionPlanByMissionID_Request) (*GetMissionPlanByMissionID_Response, error)
	mustEmbedUnimplementedPlannerServer()
}

// UnimplementedPlannerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlannerServer struct{}

func (UnimplementedPlannerServer) CalculateMissionPlan(context.Context, *CalculateMissionPlan_Request) (*CalculateMissionPlan_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMissionPlan not implemented")
}
func (UnimplementedPlannerServer) GetMissionPlanByMissionID(context.Context, *GetMissionPlanByMissionID_Request) (*GetMissionPlanByMissionID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionPlanByMissionID not implemented")
}
func (UnimplementedPlannerServer) mustEmbedUnimplementedPlannerServer() {}
func (UnimplementedPlannerServer) testEmbeddedByValue()                 {}

// UnsafePlannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlannerServer will
// result in compilation errors.
type UnsafePlannerServer interface {
	mustEmbedUnimplementedPlannerServer()
}

func RegisterPlannerServer(s grpc.ServiceRegistrar, srv PlannerServer) {
	// If the following call pancis, it indicates UnimplementedPlannerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Planner_ServiceDesc, srv)
}

func _Planner_CalculateMissionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateMissionPlan_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServer).CalculateMissionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Planner_CalculateMissionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServer).CalculateMissionPlan(ctx, req.(*CalculateMissionPlan_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Planner_GetMissionPlanByMissionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionPlanByMissionID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannerServer).GetMissionPlanByMissionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Planner_GetMissionPlanByMissionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannerServer).GetMissionPlanByMissionID(ctx, req.(*GetMissionPlanByMissionID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Planner_ServiceDesc is the grpc.ServiceDesc for Planner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Planner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "missions_api.api.v1.planner.Planner",
	HandlerType: (*PlannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateMissionPlan",
			Handler:    _Planner_CalculateMissionPlan_Handler,
		},
		{
			MethodName: "GetMissionPlanByMissionID",
			Handler:    _Planner_GetMissionPlanByMissionID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/planner/planner.proto",
}
