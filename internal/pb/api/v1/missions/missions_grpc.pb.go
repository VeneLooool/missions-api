// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/v1/missions/missions.proto

package missions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Missions_CreateMission_FullMethodName         = "/missions_api.api.v1.missions.Missions/CreateMission"
	Missions_UpdateMission_FullMethodName         = "/missions_api.api.v1.missions.Missions/UpdateMission"
	Missions_UpdateMissionStatus_FullMethodName   = "/missions_api.api.v1.missions.Missions/UpdateMissionStatus"
	Missions_GetMissionByID_FullMethodName        = "/missions_api.api.v1.missions.Missions/GetMissionByID"
	Missions_GetMissionsByAuthor_FullMethodName   = "/missions_api.api.v1.missions.Missions/GetMissionsByAuthor"
	Missions_DeleteMission_FullMethodName         = "/missions_api.api.v1.missions.Missions/DeleteMission"
	Missions_GetMissionsInStatuses_FullMethodName = "/missions_api.api.v1.missions.Missions/GetMissionsInStatuses"
)

// MissionsClient is the client API for Missions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionsClient interface {
	CreateMission(ctx context.Context, in *CreateMission_Request, opts ...grpc.CallOption) (*CreateMission_Response, error)
	UpdateMission(ctx context.Context, in *UpdateMission_Request, opts ...grpc.CallOption) (*UpdateMission_Response, error)
	UpdateMissionStatus(ctx context.Context, in *UpdateMissionStatus_Request, opts ...grpc.CallOption) (*UpdateMissionStatus_Response, error)
	GetMissionByID(ctx context.Context, in *GetMissionByID_Request, opts ...grpc.CallOption) (*GetMissionByID_Response, error)
	GetMissionsByAuthor(ctx context.Context, in *GetMissionsByAuthor_Request, opts ...grpc.CallOption) (*GetMissionsByAuthor_Response, error)
	DeleteMission(ctx context.Context, in *DeleteMission_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMissionsInStatuses(ctx context.Context, in *GetMissionsInStatuses_Request, opts ...grpc.CallOption) (*GetMissionsInStatuses_Response, error)
}

type missionsClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionsClient(cc grpc.ClientConnInterface) MissionsClient {
	return &missionsClient{cc}
}

func (c *missionsClient) CreateMission(ctx context.Context, in *CreateMission_Request, opts ...grpc.CallOption) (*CreateMission_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMission_Response)
	err := c.cc.Invoke(ctx, Missions_CreateMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) UpdateMission(ctx context.Context, in *UpdateMission_Request, opts ...grpc.CallOption) (*UpdateMission_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMission_Response)
	err := c.cc.Invoke(ctx, Missions_UpdateMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) UpdateMissionStatus(ctx context.Context, in *UpdateMissionStatus_Request, opts ...grpc.CallOption) (*UpdateMissionStatus_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMissionStatus_Response)
	err := c.cc.Invoke(ctx, Missions_UpdateMissionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) GetMissionByID(ctx context.Context, in *GetMissionByID_Request, opts ...grpc.CallOption) (*GetMissionByID_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMissionByID_Response)
	err := c.cc.Invoke(ctx, Missions_GetMissionByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) GetMissionsByAuthor(ctx context.Context, in *GetMissionsByAuthor_Request, opts ...grpc.CallOption) (*GetMissionsByAuthor_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMissionsByAuthor_Response)
	err := c.cc.Invoke(ctx, Missions_GetMissionsByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) DeleteMission(ctx context.Context, in *DeleteMission_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Missions_DeleteMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionsClient) GetMissionsInStatuses(ctx context.Context, in *GetMissionsInStatuses_Request, opts ...grpc.CallOption) (*GetMissionsInStatuses_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMissionsInStatuses_Response)
	err := c.cc.Invoke(ctx, Missions_GetMissionsInStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionsServer is the server API for Missions service.
// All implementations must embed UnimplementedMissionsServer
// for forward compatibility.
type MissionsServer interface {
	CreateMission(context.Context, *CreateMission_Request) (*CreateMission_Response, error)
	UpdateMission(context.Context, *UpdateMission_Request) (*UpdateMission_Response, error)
	UpdateMissionStatus(context.Context, *UpdateMissionStatus_Request) (*UpdateMissionStatus_Response, error)
	GetMissionByID(context.Context, *GetMissionByID_Request) (*GetMissionByID_Response, error)
	GetMissionsByAuthor(context.Context, *GetMissionsByAuthor_Request) (*GetMissionsByAuthor_Response, error)
	DeleteMission(context.Context, *DeleteMission_Request) (*emptypb.Empty, error)
	GetMissionsInStatuses(context.Context, *GetMissionsInStatuses_Request) (*GetMissionsInStatuses_Response, error)
	mustEmbedUnimplementedMissionsServer()
}

// UnimplementedMissionsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMissionsServer struct{}

func (UnimplementedMissionsServer) CreateMission(context.Context, *CreateMission_Request) (*CreateMission_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMission not implemented")
}
func (UnimplementedMissionsServer) UpdateMission(context.Context, *UpdateMission_Request) (*UpdateMission_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMission not implemented")
}
func (UnimplementedMissionsServer) UpdateMissionStatus(context.Context, *UpdateMissionStatus_Request) (*UpdateMissionStatus_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMissionStatus not implemented")
}
func (UnimplementedMissionsServer) GetMissionByID(context.Context, *GetMissionByID_Request) (*GetMissionByID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionByID not implemented")
}
func (UnimplementedMissionsServer) GetMissionsByAuthor(context.Context, *GetMissionsByAuthor_Request) (*GetMissionsByAuthor_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionsByAuthor not implemented")
}
func (UnimplementedMissionsServer) DeleteMission(context.Context, *DeleteMission_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMission not implemented")
}
func (UnimplementedMissionsServer) GetMissionsInStatuses(context.Context, *GetMissionsInStatuses_Request) (*GetMissionsInStatuses_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissionsInStatuses not implemented")
}
func (UnimplementedMissionsServer) mustEmbedUnimplementedMissionsServer() {}
func (UnimplementedMissionsServer) testEmbeddedByValue()                  {}

// UnsafeMissionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionsServer will
// result in compilation errors.
type UnsafeMissionsServer interface {
	mustEmbedUnimplementedMissionsServer()
}

func RegisterMissionsServer(s grpc.ServiceRegistrar, srv MissionsServer) {
	// If the following call pancis, it indicates UnimplementedMissionsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Missions_ServiceDesc, srv)
}

func _Missions_CreateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMission_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).CreateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_CreateMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).CreateMission(ctx, req.(*CreateMission_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_UpdateMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMission_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).UpdateMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_UpdateMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).UpdateMission(ctx, req.(*UpdateMission_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_UpdateMissionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMissionStatus_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).UpdateMissionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_UpdateMissionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).UpdateMissionStatus(ctx, req.(*UpdateMissionStatus_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_GetMissionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionByID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).GetMissionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_GetMissionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).GetMissionByID(ctx, req.(*GetMissionByID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_GetMissionsByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionsByAuthor_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).GetMissionsByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_GetMissionsByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).GetMissionsByAuthor(ctx, req.(*GetMissionsByAuthor_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_DeleteMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMission_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).DeleteMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_DeleteMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).DeleteMission(ctx, req.(*DeleteMission_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Missions_GetMissionsInStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionsInStatuses_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionsServer).GetMissionsInStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Missions_GetMissionsInStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionsServer).GetMissionsInStatuses(ctx, req.(*GetMissionsInStatuses_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Missions_ServiceDesc is the grpc.ServiceDesc for Missions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Missions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "missions_api.api.v1.missions.Missions",
	HandlerType: (*MissionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMission",
			Handler:    _Missions_CreateMission_Handler,
		},
		{
			MethodName: "UpdateMission",
			Handler:    _Missions_UpdateMission_Handler,
		},
		{
			MethodName: "UpdateMissionStatus",
			Handler:    _Missions_UpdateMissionStatus_Handler,
		},
		{
			MethodName: "GetMissionByID",
			Handler:    _Missions_GetMissionByID_Handler,
		},
		{
			MethodName: "GetMissionsByAuthor",
			Handler:    _Missions_GetMissionsByAuthor_Handler,
		},
		{
			MethodName: "DeleteMission",
			Handler:    _Missions_DeleteMission_Handler,
		},
		{
			MethodName: "GetMissionsInStatuses",
			Handler:    _Missions_GetMissionsInStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/missions/missions.proto",
}
