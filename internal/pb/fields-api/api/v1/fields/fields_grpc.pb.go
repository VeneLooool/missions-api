// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: fields-api/api/v1/fields/fields.proto

package fields

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Fields_CreateField_FullMethodName       = "/fields_api.api.v1.fields.Fields/CreateField"
	Fields_UpdateField_FullMethodName       = "/fields_api.api.v1.fields.Fields/UpdateField"
	Fields_GetFieldByID_FullMethodName      = "/fields_api.api.v1.fields.Fields/GetFieldByID"
	Fields_GetFieldsByAuthor_FullMethodName = "/fields_api.api.v1.fields.Fields/GetFieldsByAuthor"
	Fields_DeleteField_FullMethodName       = "/fields_api.api.v1.fields.Fields/DeleteField"
)

// FieldsClient is the client API for Fields service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldsClient interface {
	CreateField(ctx context.Context, in *CreateField_Request, opts ...grpc.CallOption) (*CreateField_Response, error)
	UpdateField(ctx context.Context, in *UpdateField_Request, opts ...grpc.CallOption) (*UpdateField_Response, error)
	GetFieldByID(ctx context.Context, in *GetFieldByID_Request, opts ...grpc.CallOption) (*GetFieldByID_Response, error)
	GetFieldsByAuthor(ctx context.Context, in *GetFieldsByAuthor_Request, opts ...grpc.CallOption) (*GetFieldsByAuthor_Response, error)
	DeleteField(ctx context.Context, in *DeleteField_Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fieldsClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldsClient(cc grpc.ClientConnInterface) FieldsClient {
	return &fieldsClient{cc}
}

func (c *fieldsClient) CreateField(ctx context.Context, in *CreateField_Request, opts ...grpc.CallOption) (*CreateField_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateField_Response)
	err := c.cc.Invoke(ctx, Fields_CreateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsClient) UpdateField(ctx context.Context, in *UpdateField_Request, opts ...grpc.CallOption) (*UpdateField_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateField_Response)
	err := c.cc.Invoke(ctx, Fields_UpdateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsClient) GetFieldByID(ctx context.Context, in *GetFieldByID_Request, opts ...grpc.CallOption) (*GetFieldByID_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldByID_Response)
	err := c.cc.Invoke(ctx, Fields_GetFieldByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsClient) GetFieldsByAuthor(ctx context.Context, in *GetFieldsByAuthor_Request, opts ...grpc.CallOption) (*GetFieldsByAuthor_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFieldsByAuthor_Response)
	err := c.cc.Invoke(ctx, Fields_GetFieldsByAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldsClient) DeleteField(ctx context.Context, in *DeleteField_Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fields_DeleteField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldsServer is the server API for Fields service.
// All implementations must embed UnimplementedFieldsServer
// for forward compatibility.
type FieldsServer interface {
	CreateField(context.Context, *CreateField_Request) (*CreateField_Response, error)
	UpdateField(context.Context, *UpdateField_Request) (*UpdateField_Response, error)
	GetFieldByID(context.Context, *GetFieldByID_Request) (*GetFieldByID_Response, error)
	GetFieldsByAuthor(context.Context, *GetFieldsByAuthor_Request) (*GetFieldsByAuthor_Response, error)
	DeleteField(context.Context, *DeleteField_Request) (*emptypb.Empty, error)
	mustEmbedUnimplementedFieldsServer()
}

// UnimplementedFieldsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFieldsServer struct{}

func (UnimplementedFieldsServer) CreateField(context.Context, *CreateField_Request) (*CreateField_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}
func (UnimplementedFieldsServer) UpdateField(context.Context, *UpdateField_Request) (*UpdateField_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}
func (UnimplementedFieldsServer) GetFieldByID(context.Context, *GetFieldByID_Request) (*GetFieldByID_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldByID not implemented")
}
func (UnimplementedFieldsServer) GetFieldsByAuthor(context.Context, *GetFieldsByAuthor_Request) (*GetFieldsByAuthor_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldsByAuthor not implemented")
}
func (UnimplementedFieldsServer) DeleteField(context.Context, *DeleteField_Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedFieldsServer) mustEmbedUnimplementedFieldsServer() {}
func (UnimplementedFieldsServer) testEmbeddedByValue()                {}

// UnsafeFieldsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldsServer will
// result in compilation errors.
type UnsafeFieldsServer interface {
	mustEmbedUnimplementedFieldsServer()
}

func RegisterFieldsServer(s grpc.ServiceRegistrar, srv FieldsServer) {
	// If the following call pancis, it indicates UnimplementedFieldsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Fields_ServiceDesc, srv)
}

func _Fields_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateField_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fields_CreateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServer).CreateField(ctx, req.(*CreateField_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fields_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateField_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fields_UpdateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServer).UpdateField(ctx, req.(*UpdateField_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fields_GetFieldByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldByID_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServer).GetFieldByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fields_GetFieldByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServer).GetFieldByID(ctx, req.(*GetFieldByID_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fields_GetFieldsByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFieldsByAuthor_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServer).GetFieldsByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fields_GetFieldsByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServer).GetFieldsByAuthor(ctx, req.(*GetFieldsByAuthor_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fields_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteField_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldsServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fields_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldsServer).DeleteField(ctx, req.(*DeleteField_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Fields_ServiceDesc is the grpc.ServiceDesc for Fields service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fields_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fields_api.api.v1.fields.Fields",
	HandlerType: (*FieldsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateField",
			Handler:    _Fields_CreateField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _Fields_UpdateField_Handler,
		},
		{
			MethodName: "GetFieldByID",
			Handler:    _Fields_GetFieldByID_Handler,
		},
		{
			MethodName: "GetFieldsByAuthor",
			Handler:    _Fields_GetFieldsByAuthor_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _Fields_DeleteField_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fields-api/api/v1/fields/fields.proto",
}
